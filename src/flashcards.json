
[
  {
    "id": 1,
    "title": "Array",
    "description": "A data structure consisting of a collection of elements, each identified by at least one array index or key.",
    "category": "Data Structures",
    "exampleProblemUrl": "https://leetcode.com/problems/two-sum/"
  },
  {
    "id": 2,
    "title": "Linked List",
    "description": "A linear collection of data elements whose order is not given by their physical placement in memory. Instead, each element points to the next.",
    "category": "Data Structures",
    "exampleProblemUrl": "https://leetcode.com/problems/reverse-linked-list/"
  },
  {
    "id": 3,
    "title": "Hash Table",
    "description": "A data structure that implements an associative array abstract data type, a structure that can map keys to values.",
    "category": "Data Structures",
    "exampleProblemUrl": "https://leetcode.com/problems/two-sum/"
  },
  {
    "id": 4,
    "title": "Binary Search",
    "description": "An efficient algorithm for finding an item from a sorted list of items. It works by repeatedly dividing in half the portion of the list that could contain the item, until you've narrowed down the possible locations to just one.",
    "category": "Algorithms",
    "exampleProblemUrl": "https://leetcode.com/problems/binary-search/"
  },
  {
    "id": 5,
    "title": "Sliding Window",
    "description": "This pattern is used for optimization problems in linear data structures like arrays or strings, where you need to find the longest or shortest valid subsequence.",
    "category": "Common Patterns",
    "exampleProblemUrl": "https://leetcode.com/problems/longest-substring-without-repeating-characters/"
  },
  {
    "id": 6,
    "title": "Two Pointers",
    "description": "It's often used on sorted arrays or linked lists to find pairs or triplets that satisfy certain conditions efficiently.",
    "category": "Common Patterns",
    "exampleProblemUrl": "https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/"
  },
  {
    "id": 7,
    "title": "Fast and Slow Pointers",
    "description": "Also known as the Hare & Tortoise algorithm, this is useful for dealing with cyclic linked lists or arrays, for example, to detect a loop.",
    "category": "Common Patterns",
    "exampleProblemUrl": "https://leetcode.com/problems/linked-list-cycle/"
  },
  {
    "id": 8,
    "title": "Merge Intervals",
    "description": "This pattern helps in managing problems with overlapping intervals, such as merging them or finding intersections.",
    "category": "Common Patterns",
    "exampleProblemUrl": "https://leetcode.com/problems/merge-intervals/"
  },
  {
    "id": 9,
    "title": "Cyclic Sort",
    "description": "This is used for problems involving arrays that contain numbers within a specific range, often to find missing or duplicate elements.",
    "category": "Common Patterns",
    "exampleProblemUrl": "https://leetcode.com/problems/missing-number/"
  },
  {
    "id": 10,
    "title": "In-place Reversal of a Linked List",
    "description": "This pattern reverses the nodes of a linked list without using extra space.",
    "category": "Common Patterns",
    "exampleProblemUrl": "https://leetcode.com/problems/reverse-linked-list/"
  },
  {
    "id": 11,
    "title": "Tree BFS",
    "description": "Used to traverse a tree level by level, suitable for finding the shortest path or level-related properties.",
    "category": "Common Patterns",
    "exampleProblemUrl": "https://leetcode.com/problems/binary-tree-level-order-traversal/"
  },
  {
    "id": 12,
    "title": "Tree DFS",
    "description": "Traverses a tree by exploring as far as possible down each branch before backtracking, using in-order, pre-order, or post-order traversal.",
    "category": "Common Patterns",
    "exampleProblemUrl": "https://leetcode.com/problems/binary-tree-inorder-traversal/"
  },
  {
    "id": 13,
    "title": "Two Heaps",
    "description": "This pattern uses a min-heap and a max-heap to solve problems where you need to find the median or partition elements into two sets.",
    "category": "Common Patterns",
    "exampleProblemUrl": "https://leetcode.com/problems/find-median-from-data-stream/"
  },
  {
    "id": 14,
    "title": "Subsets",
    "description": "This pattern addresses problems that require generating all possible combinations or permutations of a set.",
    "category": "Common Patterns",
    "exampleProblemUrl": "https://leetcode.com/problems/subsets/"
  },
  {
    "id": 15,
    "title": "Modified Binary Search",
    "description": "An optimized search technique for sorted data structures like arrays, linked lists, or matrices.",
    "category": "Common Patterns",
    "exampleProblemUrl": "https://leetcode.com/problems/search-in-rotated-sorted-array/"
  },
  {
    "id": 16,
    "title": "Top K Elements",
    "description": "This pattern uses a heap to efficiently find the top, smallest, or most frequent 'K' elements in a set.",
    "category": "Common Patterns",
    "exampleProblemUrl": "https://leetcode.com/problems/top-k-frequent-elements/"
  },
  {
    "id": 17,
    "title": "K-way Merge",
    "description": "Used to merge 'K' sorted lists into a single sorted list, often with the help of a min-heap.",
    "category": "Common Patterns",
    "exampleProblemUrl": "https://leetcode.com/problems/merge-k-sorted-lists/"
  },
  {
    "id": 18,
    "title": "Topological Sort",
    "description": "This is for ordering elements that have dependencies on each other, typically in a directed acyclic graph (DAG).",
    "category": "Common Patterns",
    "exampleProblemUrl": "https://leetcode.com/problems/course-schedule/"
  },
  {
    "id": 19,
    "title": "Quick Select",
    "description": "An algorithm to find the k-th smallest element in an unordered list, which is a variation of the quicksort algorithm.",
    "category": "Common Patterns",
    "exampleProblemUrl": "https://leetcode.com/problems/kth-largest-element-in-an-array/"
  },
  {
    "id": 20,
    "title": "Merge Sort",
    "description": "A divide-and-conquer algorithm that divides the array into halves, sorts them separately, and then merges them back together.",
    "category": "Algorithms",
    "exampleProblemUrl": "https://leetcode.com/problems/sort-an-array/"
  },
  {
    "id": 21,
    "title": "Quick Sort",
    "description": "An efficient divide-and-conquer sorting algorithm that picks a pivot element and partitions the array around it.",
    "category": "Algorithms",
    "exampleProblemUrl": "https://leetcode.com/problems/sort-an-array/"
  },
  {
    "id": 22,
    "title": "Heap",
    "description": "A specialized tree-based data structure that satisfies the heap property, commonly used for priority queues and heap sort.",
    "category": "Data Structures",
    "exampleProblemUrl": "https://leetcode.com/problems/kth-largest-element-in-an-array/"
  },
  {
    "id": 23,
    "title": "Union Find",
    "description": "A data structure that keeps track of elements partitioned into disjoint sets, useful for connectivity problems.",
    "category": "Data Structures",
    "exampleProblemUrl": "https://leetcode.com/problems/number-of-islands/"
  },
  {
    "id": 24,
    "title": "Dijkstra",
    "description": "An algorithm for finding the shortest paths between nodes in a graph with non-negative edge weights.",
    "category": "Algorithms",
    "exampleProblemUrl": "https://leetcode.com/problems/network-delay-time/"
  },
  {
    "id": 25,
    "title": "Dynamic Programming",
    "description": "A method for solving complex problems by breaking them down into simpler subproblems and storing results to avoid redundant calculations.",
    "category": "Common Patterns",
    "exampleProblemUrl": "https://leetcode.com/problems/climbing-stairs/"
  },
  {
    "id": 26,
    "title": "Backtracking",
    "description": "An algorithmic approach that considers searching every possible combination to solve computational problems.",
    "category": "Common Patterns",
    "exampleProblemUrl": "https://leetcode.com/problems/n-queens/"
  },
  {
    "id": 27,
    "title": "Graph Traversal",
    "description": "Techniques for visiting all vertices in a graph systematically, including BFS and DFS approaches.",
    "category": "Common Patterns",
    "exampleProblemUrl": "https://leetcode.com/problems/number-of-islands/"
  },
  {
    "id": 28,
    "title": "Stack",
    "description": "A linear data structure that follows the Last In First Out (LIFO) principle for adding and removing elements.",
    "category": "Data Structures",
    "exampleProblemUrl": "https://leetcode.com/problems/valid-parentheses/"
  },
  {
    "id": 29,
    "title": "Queue",
    "description": "A linear data structure that follows the First In First Out (FIFO) principle for adding and removing elements.",
    "category": "Data Structures",
    "exampleProblemUrl": "https://leetcode.com/problems/implement-queue-using-stacks/"
  },
  {
    "id": 30,
    "title": "Binary Tree",
    "description": "A hierarchical data structure where each node has at most two children, referred to as left and right child.",
    "category": "Data Structures",
    "exampleProblemUrl": "https://leetcode.com/problems/binary-tree-inorder-traversal/"
  },
  {
    "id": 31,
    "title": "Trie",
    "description": "A tree-like data structure used to store a dynamic set of strings, where keys are usually strings and efficient for prefix searches.",
    "category": "Data Structures",
    "exampleProblemUrl": "https://leetcode.com/problems/implement-trie-prefix-tree/"
  },
  {
    "id": 32,
    "title": "Cycle Detection",
    "description": "Algorithms to detect cycles in data structures like linked lists or graphs, often using Floyd's cycle detection algorithm.",
    "category": "Common Patterns",
    "exampleProblemUrl": "https://leetcode.com/problems/linked-list-cycle/"
  },
  {
    "id": 33,
    "title": "Binary Search Tree",
    "description": "A binary tree where the left subtree contains values less than the parent node and the right subtree contains values greater.",
    "category": "Data Structures",
    "exampleProblemUrl": "https://leetcode.com/problems/validate-binary-search-tree/"
  }
]
